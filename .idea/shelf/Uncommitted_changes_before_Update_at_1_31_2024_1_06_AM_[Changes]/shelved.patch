Index: app/src/main/java/com/animestudios/animeapp/ui/screen/detail/pages/statistics/StatisticsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.animestudios.animeapp.ui.screen.detail.pages.statistics\r\n\r\nimport android.content.res.ColorStateList\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.activityViewModels\r\nimport com.animestudios.animeapp.GetFullDataByIdQuery\r\nimport com.animestudios.animeapp.R\r\nimport com.animestudios.animeapp.app.App\r\nimport com.animestudios.animeapp.databinding.LayoutMediaStatusDistributionBinding\r\nimport com.animestudios.animeapp.databinding.ListStatsChartBarBinding\r\nimport com.animestudios.animeapp.databinding.StatisticsScreenBinding\r\nimport com.animestudios.animeapp.media.Media\r\nimport com.animestudios.animeapp.tools.*\r\nimport com.animestudios.animeapp.type.MediaType\r\nimport com.animestudios.animeapp.ui.screen.detail.pages.statistics.adapter.RankingAdapter\r\nimport com.animestudios.animeapp.viewmodel.imp.DetailsViewModelImpl\r\nimport com.github.mikephil.charting.components.XAxis\r\nimport com.github.mikephil.charting.data.*\r\nimport com.github.mikephil.charting.formatter.ValueFormatter\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlin.math.round\r\n\r\n@AndroidEntryPoint\r\nclass StatisticsScreen : Fragment() {\r\n    private var _binding: StatisticsScreenBinding? = null\r\n    private val binding get() = _binding!!\r\n    private val model by activityViewModels<DetailsViewModelImpl>()\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        _binding = StatisticsScreenBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        model.getMedia().observe(viewLifecycleOwner) {\r\n            if (it != null) {\r\n                val media = it\r\n                binding.apply {\r\n                    val parent = binding.parentStatistics\r\n                    model.getFulDataById(it)\r\n                    model.getFullData.observe(viewLifecycleOwner) {\r\n                        when (it) {\r\n                            is Resource.Error -> {\r\n\r\n                            }\r\n                            Resource.Loading -> {\r\n                            }\r\n                            is Resource.Success -> {\r\n                                val fullData = it.data\r\n\r\n                                //Ranking\r\n                                val rankingAdapter = RankingAdapter(\r\n                                    fullData.Media?.rankings as ArrayList<GetFullDataByIdQuery.Ranking>\r\n                                        ?: arrayListOf()\r\n                                )\r\n                                rankingRv.adapter = rankingAdapter\r\n\r\n                                loadPieChart(\r\n                                    fullData,\r\n                                    binding = binding,\r\n                                    parent = parent,\r\n                                    media = media\r\n                                )\r\n                                loadChart(\r\n                                    fullData,\r\n                                    binding = binding,\r\n                                    parent = parent,\r\n                                    media = media\r\n                                )\r\n\r\n                            }\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun loadPieChart(\r\n        mediaFull: GetFullDataByIdQuery.Data,\r\n        binding: StatisticsScreenBinding,\r\n        parent: ViewGroup,\r\n        media: Media\r\n    ) {\r\n        val scoreDistributionBinding = LayoutMediaStatusDistributionBinding.inflate(\r\n            LayoutInflater.from(parent.context),\r\n            parent,\r\n            false\r\n        )\r\n\r\n        scoreDistributionBinding.apply {\r\n            val chart = ArrayList<Chart>()\r\n\r\n            mediaFull.Media?.stats?.statusDistribution?.forEach {\r\n                val hexColor = it!!.status?.getColor()\r\n                val color = ColorStateList.valueOf(Color.parseColor(hexColor))\r\n                val label = getStatusLabel(it.status, MediaType.ANIME)\r\n                val amount = it.amount!!.getNumberFormatting()\r\n\r\n                chart.add(Chart(hexColor, label, it.amount.toDouble()))\r\n\r\n                when (it.status) {\r\n                    com.animestudios.animeapp.type.MediaListStatus.CURRENT -> {\r\n                        mediaStatsCurrentIcon.imageTintList = color\r\n                        mediaStatsCurrentLabel.text = label\r\n                        mediaStatsCurrentText.text = amount\r\n                    }\r\n                    com.animestudios.animeapp.type.MediaListStatus.PLANNING -> {\r\n                        mediaStatsPlanningIcon.imageTintList = color\r\n                        mediaStatsPlanningLabel.text = label\r\n                        mediaStatsPlanningText.text = amount\r\n                    }\r\n                    com.animestudios.animeapp.type.MediaListStatus.COMPLETED -> {\r\n                        mediaStatsCompletedIcon.imageTintList = color\r\n                        mediaStatsCompletedLabel.text = label\r\n                        mediaStatsCompletedText.text = amount\r\n                    }\r\n                    com.animestudios.animeapp.type.MediaListStatus.DROPPED -> {\r\n                        mediaStatsDroppedIcon.imageTintList = color\r\n                        mediaStatsDroppedLabel.text = label\r\n                        mediaStatsDroppedText.text = amount\r\n                    }\r\n                    com.animestudios.animeapp.type.MediaListStatus.PAUSED -> {\r\n                        mediaStatsPausedIcon.imageTintList = color\r\n                        mediaStatsPausedLabel.text = label\r\n                        mediaStatsPausedText.text = amount\r\n                    }\r\n                    else -> {\r\n                        // do nothing\r\n                    }\r\n                }\r\n            }\r\n\r\n            val pieEntries =\r\n                chart.mapIndexed { _, chart -> PieEntry(chart.value.toFloat(), chart.label) }\r\n            val pieDataSet = PieDataSet(pieEntries, \"\")\r\n            pieDataSet.colors = chart.map {\r\n                if (it.color.isNullOrBlank()) binding.root.context!!.getAttrValue(com.google.android.material.R.attr.colorOnPrimary) else Color.parseColor(\r\n                    it.color\r\n                )\r\n            }\r\n\r\n            val pieData = PieData(pieDataSet)\r\n            pieData.setDrawValues(false)\r\n\r\n            mediaStatsChart.statsPieChart.apply {\r\n                setHoleColor(ContextCompat.getColor(context, android.R.color.transparent))\r\n                setDrawEntryLabels(false)\r\n                setTouchEnabled(false)\r\n                description.isEnabled = false\r\n                legend.isEnabled = false\r\n                data = pieData\r\n                invalidate()\r\n            }\r\n            parent.addView(scoreDistributionBinding.root)\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    private fun loadChart(\r\n        mediaFull: GetFullDataByIdQuery.Data,\r\n        binding: StatisticsScreenBinding,\r\n        parent: ViewGroup,\r\n        media: Media\r\n    ) {\r\n        val scoreDistributionBinding = ListStatsChartBarBinding.inflate(\r\n            LayoutInflater.from(App.context),\r\n            parent,\r\n            false\r\n        )\r\n\r\n        val chart = ArrayList<Chart>()\r\n        mediaFull.Media?.stats?.scoreDistribution?.forEach {\r\n            val hexColor = when (it?.score) {\r\n                10 -> \"#d2492d\"\r\n                20 -> \"#d2642c\"\r\n                30 -> \"#d2802e\"\r\n                40 -> \"#d29d2f\"\r\n                50 -> \"#d2b72e\"\r\n                60 -> \"#d3d22e\"\r\n                70 -> \"#b8d22c\"\r\n                80 -> \"#9cd42e\"\r\n                90 -> \"#81d12d\"\r\n                100 -> \"#63d42e\"\r\n                else -> null\r\n            }\r\n            val label = it!!.score!!.getNumberFormatting()\r\n            val amount = it!!.amount!!.toDouble()\r\n\r\n            chart.add(Chart(hexColor, label, amount))\r\n        }\r\n\r\n        val useStringLabel = chart.any { it.label.toDoubleOrNull() == null } ?: false\r\n\r\n        val newValueFormatter = object : ValueFormatter() {\r\n            override fun getFormattedValue(value: Float): String {\r\n                return value.toInt().toString()\r\n            }\r\n        }\r\n\r\n        val barEntries = chart.mapIndexed { index, chart ->\r\n            BarEntry(\r\n                if (useStringLabel) index * 10F + 10F else (chart.label.toFloatOrNull()\r\n                    ?: index * 10F + 10F), chart.value.toFloat()\r\n            )\r\n        }\r\n        val barDataSet = BarDataSet(barEntries, \"\")\r\n        barDataSet.colors = chart.map {\r\n            if (it.color.isNullOrBlank()) requireContext().getAttrValue(com.google.android.material.R.attr.colorPrimary) else Color.parseColor(\r\n                it.color\r\n            )\r\n        }\r\n\r\n        val barData = BarData(barDataSet)\r\n        barData.setValueTextColor(requireContext().getAttrValue(com.google.android.material.R.attr.colorOnPrimary))\r\n        barData.barWidth = 3F\r\n        barData.setValueFormatter(newValueFormatter)\r\n\r\n        scoreDistributionBinding.statsBarChart.axisLeft.apply {\r\n            setDrawGridLines(false)\r\n            setDrawAxisLine(false)\r\n            setDrawLabels(false)\r\n        }\r\n\r\n        scoreDistributionBinding.statsBarChart.axisRight.apply {\r\n            setDrawGridLines(false)\r\n            setDrawAxisLine(false)\r\n            setDrawLabels(false)\r\n        }\r\n\r\n        scoreDistributionBinding.statsBarChart.xAxis.apply {\r\n            setDrawGridLines(false)\r\n            position = XAxis.XAxisPosition.BOTTOM\r\n            setLabelCount(barDataSet.entryCount, true)\r\n            textColor = requireContext().getAttrValue(R.attr.themeContentColor)\r\n\r\n            if (chart.isNotEmpty() && useStringLabel) {\r\n                valueFormatter = object : ValueFormatter() {\r\n                    override fun getFormattedValue(value: Float): String {\r\n                        val labelIndex = round(value / 10.0) - 1\r\n                        if (labelIndex >= 0 && labelIndex < chart.size) {\r\n                            return chart[labelIndex.toInt()].label\r\n                        }\r\n                        return \"\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        scoreDistributionBinding.statsBarChart.apply {\r\n            setTouchEnabled(false)\r\n            description.isEnabled = false\r\n            legend.isEnabled = false\r\n            data = barData\r\n            invalidate()\r\n        }\r\n        parent.addView(scoreDistributionBinding.root)\r\n    }\r\n\r\n    private fun getStatusLabel(\r\n        status: com.animestudios.animeapp.type.MediaListStatus?,\r\n        mediaType: MediaType?\r\n    ): String {\r\n        return status?.getString(if (mediaType == MediaType.MANGA) MediaType.MANGA else MediaType.ANIME)\r\n            ?: \"\"\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/animestudios/animeapp/ui/screen/detail/pages/statistics/StatisticsScreen.kt b/app/src/main/java/com/animestudios/animeapp/ui/screen/detail/pages/statistics/StatisticsScreen.kt
--- a/app/src/main/java/com/animestudios/animeapp/ui/screen/detail/pages/statistics/StatisticsScreen.kt	(revision 4517f000c3950db6b2a887370fd1dbb657926713)
+++ b/app/src/main/java/com/animestudios/animeapp/ui/screen/detail/pages/statistics/StatisticsScreen.kt	(date 1706641968811)
@@ -49,6 +49,9 @@
                 val media = it
                 binding.apply {
                     val parent = binding.parentStatistics
+
+
+
                     model.getFulDataById(it)
                     model.getFullData.observe(viewLifecycleOwner) {
                         when (it) {
